#!/usr/bin/env python
# __BEGIN_LICENSE__
# Copyright (C) 2006-2010 United States Government as represented by
# the Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
# __END_LICENSE__

import sys
import optparse
import subprocess
import os.path as P

def run(bin, args, **kw):
    binpath = P.join(kw.get('path', P.dirname(P.abspath(__file__))), bin)
    call = [binpath]
    call.extend(args)

    if opt.dryrun:
        print '%s' % ' '.join(call)
        return
    try:
        code = subprocess.call(call)
    except OSError, e:
        raise Exception('%s: %s' % (binpath, e))
    if code != 0:
        raise Exception('Stereo step ' + kw['msg'] + ' failed')

def die(msg, code=-1):
    print >>sys.stderr, msg
    sys.exit(code)

if __name__ == '__main__':
    usage = '''stereo [options] <Left_input_image> <Right_input_image>
              [Left_camera_file] [Right_camera_file] <output_file_prefix>
        Extensions are automaticaly added to the output files.
        Camera model arguments may be optional for some stereo
        session types (e.g. isis). Stereo parameters should be
        set in the stereo.default file.

  [ASP [@]ASP_VERSION[@]]'''

    p = optparse.OptionParser(usage=usage)
    p.add_option('--threads',              dest='threads',     type='int',
                 help='Select the number of processors (threads) to use.')
    p.add_option('-t', '--session-type',   dest='session',
                 help='Select the stereo session type to use for processing. [options: pinhole isis dg]')
    p.add_option('-s', '--stereo-file',    dest='filename',    default='./stereo.default',
                 help='Explicitly specify the stereo.default file to use. [default: ./stereo.default]')
    p.add_option('-e', '--entry-point',    dest='entry_point', default=0,
                 help='Pipeline entry point (an integer from 0-4)', type='int')
    p.add_option('--draft-mode',           dest='draft_mode',  default=False, action='store_true',
                 help='Cause pyramid correlator to save out debug imagery.')
    p.add_option('--optimized-correlator', dest='optimized',   default=False, action='store_true',
                 help='Use the optimized correlator instead of the pyramid correlator.')
    p.add_option('--no-bigtiff',           dest='no_bigtiff',  default=False, action='store_true',
                 help='Tell GDAL to not create bigtiffs.')
    p.add_option('--dry-run',              dest='dryrun',      default=False, action='store_true',
                 help=optparse.SUPPRESS_HELP)
    p.add_option('--debug',                dest='debug',       default=False, action='store_true',
                 help=optparse.SUPPRESS_HELP)
    p.add_option('-v', '--version',        dest='version',     default=False, action='store_true',
                 help='Display the version of software.')

    global opt
    (opt, files) = p.parse_args()

    if not files and not opt.version:
        p.print_help()
        die('\nERROR: Missing input files', code=2)

    args = []

    if opt.session is not None:
        args.extend(['--session-type', opt.session])
    if opt.threads is not None:
        args.extend(['--threads', str(opt.threads)])
    if opt.draft_mode:
        args.append('--draft-mode')
    if opt.optimized:
        args.append('--optimized-correlator')
    if opt.no_bigtiff:
        args.append('--no-bigtiff')
    if opt.version:
        args.append('-v')

    args.extend(['--stereo-file', opt.filename])
    args.extend(files)

    try:
        if ( opt.entry_point <= 0 ):
            run('stereo_pprc', args, msg='0: Preprocessing')
        if ( opt.entry_point <= 1 ):
            run('stereo_corr', args, msg='1: Correlation')
        if ( opt.entry_point <= 2 ):
            run('stereo_rfne', args, msg='2: Refinement')
        if ( opt.entry_point <= 3 ):
            run('stereo_fltr', args, msg='3: Filtering')
        if ( opt.entry_point <= 4 ):
            tri = 'stereo_tri'
            if ( opt.session.lowercase == "rpc" ):
                tri += '_rpc'
            run(tri,           args, msg='4: Triangulation')
    except Exception, e:
        if not opt.debug:
            die(e)
        raise
